<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Waiting for Singularity]]></title>
  <link href="http://anaerobeth.github.io/atom.xml" rel="self"/>
  <link href="http://anaerobeth.github.io/"/>
  <updated>2013-09-24T14:54:33-04:00</updated>
  <id>http://anaerobeth.github.io/</id>
  <author>
    <name><![CDATA[Beth Tenorio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JQuery API Flashcards]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/24/jquery-flashcard/"/>
    <updated>2013-09-24T13:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/24/jquery-flashcard</id>
    <content type="html"><![CDATA[<p>An <a href="https://github.com/anaerobeth/ruby-flashcard/blob/master/jquery-flashcards.rb">flashcard app</a> to test your knowledge of the JQuery API.
Question pool based on documentation from  <a href="http://api.jquery.com/">jQuery API</a>.</p>

<p>Outputs:</p>

<pre><code>    *** Test your knowledge of jQuery API !***
    Vocabulary based on jQuery API documentation
    http://api.jquery.com/

    Q: Selects the element that is the root of the document.
    A: :root
    Correct
    Enter any key to continue or 'x' to exit: y

    Q: Reduce the set of matched elements to the first in the set.
    A: :first
    Incorrect. The answer is: .first()
    Enter any key to continue or 'x' to exit: 

    Q: Selects all next elements matching "next" that are immediately preceded by a sibling "prev".
    A: ("prev" &gt; "next")
    Incorrect. The answer is: ("prev + next")
    Enter any key to continue or 'x' to exit: x
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Flashcards]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/23/javascript-flashcard/"/>
    <updated>2013-09-23T11:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/23/javascript-flashcard</id>
    <content type="html"><![CDATA[<p>An <a href="https://github.com/anaerobeth/ruby-flashcard/blob/master/javascript-flashcards.rb">flashcard app</a> to test your knowledge of JavaScript statements.
Question pool based on documentation from the friendly folks at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference">Mozilla Developer Network</a>.</p>

<p>Outputs:</p>

<pre><code>    *** Test your knowledge of JavaScript statements!***
    Vocabulary based on vocabulary from Mozilla Developer Network
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference

    Q: Declares a read-only named constant.
    A: const
    Correct
    Enter any key to continue or 'x' to exit: r

    Q: Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.
    A: while
    Incorrect. The answer is: if...else
    Enter any key to continue or 'x' to exit: y

    Q: A statement used to group zero or more statements and is delimited by a pair of curly brackets.
    A: block
    Correct
    Enter any key to continue or 'x' to exit: x
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Adventures - Part 1]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/21/git-adventures-1/"/>
    <updated>2013-09-21T15:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/21/git-adventures-1</id>
    <content type="html"><![CDATA[<ul>
<li>How to fork a GitHub project</li>
<li>Cloning a forked repository and its branches</li>
<li>Updating a forked repository</li>
</ul>


<p>Scenario 1: I want to fork a project on GitHub to work on a feature in my local repository.</p>

<pre><code>    Go to the prject page on GitHub, https://github.com/PROJECT_AUTHOR/PROJECT.git 
    Click the "Fork" button
    The project will be added to your list of repositories
</code></pre>

<p>Scenario 2: The Github repository has a branch called &ldquo;bananas&rdquo;. I want to copy that branch in my local repository.</p>

<pre><code>    git fetch origin
    git checkout --track origin/bananas
</code></pre>

<p>Scenario 3: A day later, another branch called &ldquo;cool-beans&rdquo; was added to the original project. I want to add that branch in my local repository as well.</p>

<pre><code>    git remote add upstream https://github.com/PROJECT_AUTHOR/PROJECT.git
    git fetch upstream
    git checkout --track upstream/cool-beans
</code></pre>

<p>References:
<a href="https://help.github.com/articles/fork-a-repo">GitHub article</a>
and StackOverflow discussions <a href="http://stackoverflow.com/questions/2767605/after-i-fork-a-github-project-how-can-i-stay-current-with-the-original-project?rq=1">here</a> and <a href="http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository?rq=1">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decode This Message]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/20/lessons-in-base64-encoding/"/>
    <updated>2013-09-20T13:54:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/20/lessons-in-base64-encoding</id>
    <content type="html"><![CDATA[<h3>A lesson in Base64 encoding</h3>

<p>A recent hackathon offered a sweet discount to developers who could crack the following encoded message:</p>

<pre><code>    bmljZSBkZWNvZGluZyB5b3VuZyBwYWRhd2FuIFVzZSB5b3UgbXVzdCBsZWFybmVyIGZyZWUgdGlja2V0IGNvZGU6IEhBQ0tUQVNUSUM=
</code></pre>

<p>The last character of the message is &ldquo;=&rdquo; which points us to the right direction.
Base64 encoding uses &ldquo;=&rdquo; as the character for padding</p>

<p>According to Wikipedia:</p>

<blockquote><p>Base64 encoding schemes are commonly used when there is a need to encode binary data that needs to be stored and transferred over media that are designed to deal with textual data.
This is to ensure that the data remains intact without modification during transport.
Base64 is commonly used in a number of applications including email via MIME, and storing complex data in XML.</p></blockquote>

<p>Solution in Python</p>

<pre><code>    &gt;&gt;&gt; import base64
    &gt;&gt;&gt; coded_string = '''bmljZSBkZWNvZGluZyB5b3VuZyBwYWRhd2FuIFVzZSB5b3UgbXVzdCBsZWFybmVyIGZyZWUgdGlja2V0IGNvZGU6IEhBQ0tUQVNUSUM='''
    &gt;&gt;&gt; base64.b64decode(coded_string)
    'nice decoding young padawan Use you must learner free ticket code: HACKTASTIC'

    To encode a message in Ruby: Base64.encode64(message)
    Tested in Python 2.7.2
</code></pre>

<p>Solution in Ruby</p>

<pre><code>    2.0.0-p247 :001 &gt; require 'base64'
     =&gt; true 

    2.0.0-p247 :002 &gt; coded_string = "bmljZSBkZWNvZGluZyB5b3VuZyBwYWRhd2FuIFVzZSB5b3UgbXVzdCBsZWFybmVyIGZyZWUgdGlja2V0IGNvZGU6IEhBQ0tUQVNUSUM="
     =&gt; "bmljZSBkZWNvZGluZyB5b3VuZyBwYWRhd2FuIFVzZSB5b3UgbXVzdCBsZWFybmVyIGZyZWUgdGlja2V0IGNvZGU6IEhBQ0tUQVNUSUM=" 

    2.0.0-p247 :005 &gt; puts Base64.decode64(coded_string)
    nice decoding young padawan Use you must learner free ticket code: HACKTASTIC
     =&gt; nil 


    To encode a message in Python: base64.b64encode(message)
    Tested in Ruby 2.0.0
</code></pre>

<p>More on Base64 encoding in <a href="http://stackoverflow.com/questions/3470546/python-base64-data-decode">StackOverflow</a> and <a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/base64/rdoc/Base64.html">Ruby-doc</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux Key Bindings Flashcards]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/18/tmux-flashcard/"/>
    <updated>2013-09-18T11:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/18/tmux-flashcard</id>
    <content type="html"><![CDATA[<p>An <a href="https://github.com/anaerobeth/ruby-flashcard/blob/master/tmux-flashcards.rb">flashcard app</a> to test your knowledge of Tmux key bindings.
Question pool based on the Tmux manual pages from <a href="http://www.openbsd.org/.">http://www.openbsd.org/.</a></p>

<p>Outputs:</p>

<pre><code>*** Test your knowledge of Ruby Globals!***
Based on the manual pages from http://www.openbsd.org/

Q: What tmux key binding does the following: Force redraw of the attached client
A: a
Incorrect. The answer is: r
Do you want to continue? (Y/N): y

Q: What tmux key binding does the following: Break the current pane out of the window
A: !
Correct
Do you want to continue? (Y/N): y

Q: What tmux key binding does the following: Enter copy mode to copy text or view the history
A: [
Correct
Do you want to continue? (Y/N): n
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brains in Jars!]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/16/brains-in-jars/"/>
    <updated>2013-09-16T12:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/16/brains-in-jars</id>
    <content type="html"><![CDATA[<p>Singularity Hub describes how scientists grew miniature, but distinctly human, <a href="http://singularityhub.com/2013/08/30/scientists-grow-miniature-but-distinctly-human-brain-in-the-lab/">brain in the lab</a>.</p>

<blockquote><p>Austrian researchers have used regenerative techniques to grow a miniature human brain in the lab, they reported recently in the journal Nature.</p>

<p>The researchers started with pluripotent human stem cells, or stem cells that are capable of developing into various kinds of specialized cell. After letting them develop, they removed proto-neural cells and placed them on a scaffold. Using a bioreactor to improve cellular growing conditions, they obtained a brain-like organ that exhibited differentiated brain regions.</p>

<p>The mini-brains developed into distinct regions, including a cerebral cortex, retina (pictured), meninges and choroid plexus. But they stopped growing after two months. The Austrian researchers, led by Jurgen Knoblich of the Institute of Molecular Biotechnology of the Austrian Academy of Sciences, said that in the absence of a circulation system, the core of the mini-brains probably didn’t receive adequate nutrients or oxygen to continue growing.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake Tasks Flashcards]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/12/rake-flashcard/"/>
    <updated>2013-09-12T11:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/12/rake-flashcard</id>
    <content type="html"><![CDATA[<p>An <a href="https://github.com/anaerobeth/ruby-flashcard/blob/master/rake-flashcards.rb">flashcard app</a> to test your knowledge of Rake tasks.</p>

<p>Outputs:</p>

<pre><code>    Q: What rake task does the following: Run tests quickly by merging all types and not resetting db?
    A: test:all
    Correct
    Do you want to continue? (Y/N): y

    Q: What rake task does the following: Load the seed data from db/seeds.rb?
    A: db:seed
    Correct
    Do you want to continue? (Y/N): y

    Q: What rake task does the following: Run tests quickly by merging all types and not resetting db?
    A: db:test
    Incorrect. The answer is: test:all
    Do you want to continue? (Y/N): n
</code></pre>

<p>Read about the humble beginnings of Rake in <a href="http://rake.rubyforge.org/files/doc/rational_rdoc.html">Rational.doc</a>.
For a good introduction to Rake, head to <a href="http://jasonseifer.com/2010/04/06/rake-tutorial">Jason Seifer&rsquo;s blog</a>.</p>

<pre><code>    "I never intended to write this code. I‘m not convinced it is useful, and I‘m not convinced anyone would even be interested in it."
    -  Jim Weirich
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pi Approximation in Python and Ruby]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/10/pi-approximation-in-python-and-ruby/"/>
    <updated>2013-09-10T17:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/10/pi-approximation-in-python-and-ruby</id>
    <content type="html"><![CDATA[<p>In 1910, the mathematician Srinivasa Ramanujan found several rapidly converging infinite series that can be used to generate <a href="http://en.wikipedia.org/wiki/Srinivasa_Ramanujan#Mathematical_achievements">a numerical approximation of pi</a>. His series are now the basis for the fastest algorithms currently used to calculate π.</p>

<p>Below are implementations of a function called estimate_pi that uses his formula to compute and return an estimate of pi (an exercise from Chapter 7 of Think Python by Allen Downey).</p>

<h3>Solution in Python</h3>

<pre><code>import math

def factorial(n):
    if n == 0:
        return 1
    else:
        recurse = factorial(n-1)
        result = n * recurse
        return result

def estimate_pi():
    total = 0
    k = 0
    factor = 2 * math.sqrt(2) / 9801
    keep_going = True
    while keep_going == True:
        numerator = float(factorial(4*k) * (1103 + 26390 * k))
        denominator = float(factorial(k)**4) * 396**(4*k)
        term = factor * float(numerator/denominator)
        total += term
        k += 1
        if term &lt; 1e-15:
            keep_going == False
            print "Finished at iteration number", k
            break
    return 1 / total

print estimate_pi()
</code></pre>

<h3>Solution in Ruby</h3>

<pre><code>def factorial(n)
  if n == 0
    return 1
  else
    recurse = factorial(n-1)
    result = n * recurse
  end
  return result
end

def estimate_pi
  total = 0
  k = 0
  factor = 2 * Math.sqrt(2) / 9801
  keep_going = true

  while keep_going == true
    numerator = (factorial(4*k).to_f * (1103 + 26390 * k).to_f)
    denominator = (factorial(k).to_f**4) * 396**(4*k).to_f
    term = factor.to_f * (numerator.to_f/denominator.to_f)
    total += term
    k += 1
    puts term &lt; 1E-15

    if term &lt; 1E-15
      keep_going == false
      puts "Finished at iteration number #{k}"
      break
    end

  end
  return 1 / total
end

puts estimate_pi()
</code></pre>

<p>Outputs:</p>

<pre><code>Finished at iteration number 3
3.14159265359
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regular Expressions Flashcards]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/09/regex-flashcard/"/>
    <updated>2013-09-09T11:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/09/regex-flashcard</id>
    <content type="html"><![CDATA[<p>An <a href="https://github.com/anaerobeth/ruby-flashcard/blob/master/regex-flashcards.rb">flashcard app</a> to test your knowledge of regular expressions.</p>

<p>Question pool based on terminologies from <a href="http://www.zenspider.com/Languages/Ruby/QuickRef.html">Ruby QuickRef</a> from ZenSpider.com</p>

<p>Outputs:</p>

<pre><code>    *** Test your knowledge of Regular Expressions***
    Based on Ruby QuickRef from ZenSpider.com

    Q: non-word boundary
    A: \B
    Correct
    Do you want to continue? (Y/N):y

    Q: 0 or more previous regular expression (non-greedy)
    A: .
    Incorrect. The answer is: *?
    Do you want to continue? (Y/N):

    Q: 0 or more previous regular expression
    A: *
    Correct
    Do you want to continue? (Y/N):n
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All the buzz about Fizzbuzz]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/07/all-the-buzz-about-fizzbuzz/"/>
    <updated>2013-09-07T15:12:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/07/all-the-buzz-about-fizzbuzz</id>
    <content type="html"><![CDATA[<h3>Do companies still use <a href="http://c2.com/cgi/wiki?FizzBuzzTest">Fizzbuzz</a> to find programmers who can code?</h3>

<p>The test may be <a href="http://imranontech.com/2007/01/24/using-fizzbuzz-to-find-developers-who-grok-coding/">old news</a> but FizzBuzz is still relevant.
Some interesting observations: Global nerdy found that only <a href="http://www.globalnerdy.com/2012/11/15/fizzbuzz-still-works/">40% of the candidates</a> he interviewed could write FizzBuzz, LosTechies believe it provides <a href="http://lostechies.com/jimmybogard/2013/01/29/fizzbuzz-is-dead-long-live-fizzbuzz/">an accurate window into coding skills</a>, while <a href="http://rtigger.com/blog/2013/07/23/the-shortcomings-of-fizzbuzz">some engineers think it is plain boring</a>.</p>

<p>StackExchange has suggestions on <a href="http://programmers.stackexchange.com/questions/152745/learn-programming-backwards-or-so-i-failed-the-fizzbuzz-test-now-what">what to do after you fail the test</a> in an interview.
Resources:
<a href="http://projecteuler.net/">Project Euler</a>
<a href="http://www.ic.unicamp.br/~meidanis/courses/mc336/2009s2/prolog/problemas/index.html">99 Prolog Puzzles</a>
<a href="http://www.topcoder.com/">TopCoder</a>
<a href="https://code.google.com/codejam">Google Code Jam</a></p>

<p>Find <a href="http://programmers.stackexchange.com/questions/756/where-can-i-find-programming-puzzles-and-challenges">more programming exercises</a> on StackExchange.</p>

<h3>FizzBuzz test:</h3>

<p>Write a program that prints out the numbers from 1 through 100, but…</p>

<blockquote><p>For numbers that are multiples of 3, print “Fizz” instead of the number.
For numbers that are multiples of 5, print “Buzz” instead of the number
For numbers that are multiples of both 3 and 5, print “FizzBuzz” instead of the number.</p></blockquote>

<h3>Shortest Fizzbuzz Scripts</h3>

<p>Implemented in Python</p>

<pre><code>for i in range(1,101):print"FizzBuzz"[i*i%3*4:8--i**4%5]or i
for i in range(1,101):print"Fizz"*(i%3&lt;1)+"Buzz"*(i%5&lt;1)or i
for x in range(100): print x%3/2*'Fizz'+x%5/4*'Buzz' or x+1

via  http://koichitamura.blogspot.com/2009/05/python-fizzbuzz.html
and tested on Python v2.7.2
</code></pre>

<p>Implemented in Ruby</p>

<pre><code>(1..100).map{|n|puts"FizzBuzz#{n}"[n%3&lt;1?0:n%5&lt;1?4:8,n%15&lt;1?8:4]}
1.upto(100){|i|p"FizzBuzz#{i}"[i%3&lt;1?0:i%5&lt;1?4:8,i%15&lt;1?8:4]}
100.times{|i|p"FizzBuzz#{i}"[i%3&lt;1?0:i%5&lt;1?4:8,i%15&lt;1?8:4]}

via http://golf.shinh.org/p.rb?FizzBuzz and tested on Ruby v2.0.0
</code></pre>

<p>Implemented in Perl</p>

<pre><code>perl -le'print(($_%3?"":Fizz).($_%5?"":Buzz)or$_)for 1..100'
perl -M5.01 -e 'say+(Fizz)[$_%3].(Buzz)[$_%5]||$_,for 1..100'

via http://www.perlmonks.org/?node_id=602901 tested on v5.12.4
</code></pre>

<p>Implemented in PHP</p>

<pre><code>while(++$i&lt;100)echo($i%15?$i%3?$i%5?$i:Buzz:Fizz:FizzBuzz)."\n";

via http://jakespurlock.com/2012/11/php-fizzbuzz-test/ tested on PHP 5
</code></pre>

<h3>Statistics on Shortest FizzBuzz codes</h3>

<p><a href="http://golf.shinh.org/p.rb?FizzBuzz">http://golf.shinh.org/p.rb?FizzBuzz</a></p>

<table>
<thead>
<tr>
<th>Language </th>
<th>  User  </th>
<th>   Size   </th>
<th>   Time   </th>
<th>   Date   </th>
<th> Statistics</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ruby </td>
<td> ksk </td>
<td> 50 </td>
<td> 0.0162 </td>
<td> 11/02/15 </td>
<td> 0B / 25B / 24B</td>
</tr>
<tr>
<td>Perl </td>
<td> shmem </td>
<td> 48 </td>
<td> 0.0918 </td>
<td> 07/03/02 </td>
<td> 0B / 22B / 25B</td>
</tr>
<tr>
<td>Python </td>
<td> Defenestrator </td>
<td> 56 </td>
<td> 0.1151 </td>
<td> 07/04/20 </td>
<td> 0B / 35B / 20B</td>
</tr>
<tr>
<td>Clojure </td>
<td> youz </td>
<td> 77 </td>
<td> 2.7364 </td>
<td> 11/06/01 </td>
<td> 0B / 47B / 24B</td>
</tr>
<tr>
<td>JavaScript </td>
<td> ozy4dm </td>
<td> 56 </td>
<td> 0.0450 </td>
<td> 07/02/25 </td>
<td> 0B / 30B / 26B</td>
</tr>
<tr>
<td>AWK </td>
<td> nn </td>
<td> 57 </td>
<td> 0.0024 </td>
<td> 08/10/27 </td>
<td> 0B / 32B / 24B</td>
</tr>
<tr>
<td>Bash </td>
<td> daishi </td>
<td> 41 </td>
<td> 0.0152 </td>
<td> 11/02/26 </td>
<td> 0B / ?B / ?B</td>
</tr>
<tr>
<td>Scala </td>
<td> lyrical_logical </td>
<td> 66 </td>
<td> 7.8083 </td>
<td> 11/07/12 </td>
<td> 0B / 36B / 29B</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Flashcards: Globals in Ruby]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/06/ruby-globals-flashcard/"/>
    <updated>2013-09-06T11:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/06/ruby-globals-flashcard</id>
    <content type="html"><![CDATA[<p>An <a href="https://github.com/anaerobeth/ruby-flashcard">flashcard app</a> to test your knowledge of Ruby global variables.</p>

<p>Question pool based on terminologies from <a href="http://www.zenspider.com/Languages/Ruby/QuickRef.html">Ruby QuickRef</a> from ZenSpider.com</p>

<p>Outputs:</p>

<pre><code>*** Test your knowledge of Ruby Globals!***
Based on Ruby QuickRef from ZenSpider.com

Q: The exception object passed to #raise
A: $!
Correct
Do you want to continue? (Y/N):y

Q: The status of the last executed child process. Read only. Thread local.
A: $.
Incorrect. The answer is: $?
Do you want to continue? (Y/N):y

Q: The current standard input.
A: $stdin
Correct
Do you want to continue? (Y/N):n
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chess Quote Bot]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/05/chess-quote-bot/"/>
    <updated>2013-09-05T15:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/05/chess-quote-bot</id>
    <content type="html"><![CDATA[<p>A <a href="https://github.com/anaerobeth/BSS_SMS_QuoteBot/blob/master/app.py">quote bot app</a> developed using Python, Flask and Twilio API.</p>

<h2>Quotes from Chess Grandmasters</h2>

<h3>Text 1-617-9936601 for an inspirational chess quote</h3>

<pre><code>The beauty of a move lies not in its appearance but in the thought behind it.
-  Aaron Nimzowitsch
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROT13 encryption in Python and Ruby]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/04/rot13-encryption-in-python-and-ruby/"/>
    <updated>2013-09-04T15:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/04/rot13-encryption-in-python-and-ruby</id>
    <content type="html"><![CDATA[<p>A program to encrypt a message in ROT13 by shifting a letter through the alphabet (an exercise from Chapter 8 of Think Python by Allen Downey)</p>

<p>ASCII numbers
  ord(&lsquo;a&rsquo;) => 97
  ord(&lsquo;z&rsquo;) => 122
  ord(&lsquo;A&rsquo;) = > 65
  ord(&lsquo;Z&rsquo;) = > 90
  chr(97) => &lsquo;a&rsquo;</p>

<p>Key is the number of places the letters of the message should be moved during encryption</p>

<h3>Solution in Python</h3>

<pre><code>def rotate_word(message, key):
    new_message = ''
    s = message.lower()
    for letter in s:
        new_ord = key + ord(letter)
        if new_ord &gt; 122:
            new_ord = new_ord - 26
            new_letter = chr(new_ord)
        else:
            new_letter = chr(new_ord)

        new_message = new_message + new_letter
    return new_message.lower()

words = ['abc', 'python', 'ruby', 'unladen swallow']

print "*** Messages encrypted in ROT13 ***"
for word in words:
    print "%s: %s" % (word, rotate_word(word, 13))
</code></pre>

<h3>Solution in Ruby</h3>

<pre><code>def rotate_word(message, key)
  new_message = ''
  message.downcase!
  message_array = message.split('')
  message_array.each do |m|
    new_ord = key + m[0].ord
    if new_ord &gt; 122
      new_ord = new_ord - 26
      new_letter = new_ord.chr
    else
      new_letter = new_ord.chr
    end
    new_message = new_message + new_letter
  end
  return new_message.downcase
end

words = ['abc', 'python', 'ruby', 'unladen swallow']

puts "*** Messages encrypted in ROT13 ***"
words.each do |word|
    puts "#{word}: #{rotate_word(word, 13)}"
end
</code></pre>

<p>Outputs:</p>

<pre><code>*** Messages encrypted in ROT13 ***
abc: nop
python: clguba
ruby: ehol
unladen swallow: haynqra-fjnyybj
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 Pro Tip: Multiple Cursors ]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/03/sublime-text-pro-tips/"/>
    <updated>2013-09-03T11:58:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/03/sublime-text-pro-tips</id>
    <content type="html"><![CDATA[<p>This Sublime Text 2 feature is a real-time saver:
1. Place your cursor within the word and press Ctrl+Cmd+G.
2. This selects every occurrence of that word and creates multiple cursors.
3. Edit the word and watch the multiple cursors do the same.</p>

<p>Learn about Multiple Cursors and other pro tips from the article <a href="http://www.webdesignermag.co.uk/inspiration/10-must-know-sublime-text-2-tips/">10 Must-know Sublime Text 2 tips</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Palindrome checker in Python and Ruby]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/09/02/palindrome-checker-in-python-and-ruby/"/>
    <updated>2013-09-02T09:18:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/09/02/palindrome-checker-in-python-and-ruby</id>
    <content type="html"><![CDATA[<p>Write a function that takes a string argument and returns
True if it is a palindrome and False otherwise (an exercise from Chapter 6 of Think Python by Allen Downey).</p>

<h3>Solution in Python</h3>

<pre><code>def first(word):
    return word[0]

def last(word):
    return word[-1]

def middle(word):
    return word[1:-1]

def is_palindrome(word):
    if len(word) &lt;=1:
        return True
    if first(word) != last(word):
        return False
    return is_palindrome(middle(word))

words = ['cat', 'noon', 'radar', 'swallows', 'racecar']

for word in words:
  print '%s: %s' % (word, is_palindrome(word))
</code></pre>

<h3>Solution in Ruby</h3>

<pre><code>def first_letter(word)
  word[0]
end

def last_letter(word)
  word[-1]
end

def middle(word)
  word.byteslice(1..-2)
end

def is_palindrome?(word)
  if word.length &lt;= 1
    return 'True'
  elsif first_letter(word) != last_letter(word)
    return 'False'
  else
    return is_palindrome?(middle(word))
  end
end

puts "Palindrome Detector"

array = %w[cat noon radar swallows racecar]
array.each do |word|
  puts "#{word}: #{is_palindrome?(word)}"
end
</code></pre>

<p>Outputs:</p>

<pre><code>Palindrome Detector
cat: False
noon: True
radar: True
swallows: False
racecar: True
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Data is watching you]]></title>
    <link href="http://anaerobeth.github.io/blog/2013/08/29/big-data-is-watching-you/"/>
    <updated>2013-08-29T15:52:00-04:00</updated>
    <id>http://anaerobeth.github.io/blog/2013/08/29/big-data-is-watching-you</id>
    <content type="html"><![CDATA[<p>BBC UK weighs in on how <a href="http://www.bbc.co.uk/news/technology-23253949">building a digital copy of our physical world</a> can have profound consequences on how we live:</p>

<blockquote><h2>Tomorrow&rsquo;s cities: How big data is changing the world</h2>

<p>Nick Pickles, director of privacy campaign group Big Brother Watch, agrees that big data could become just another word for Big Brother. &ldquo;The core functionality of a smart city requires a vast amount data to be collected on every aspect of our lives every minute of every day. The question is how does that data get used? And it doesn&rsquo;t require a huge amount of imagination to see how it could be used to monitor people in a very real Big Brother way.&rdquo;</p>

<p>&ldquo;At present the control of information is being taken away from citizens, and companies providing services are rushing to find ways of generating revenue from the data they hold. The danger is that when smart cities become a reality, individuals will not be able to control the ways they are monitored or what happens to the information, which is exactly the opposite of how it should be.&rdquo;</p>

<p>The issue has huge implications for society and is going to need serious debate, Dr Ratti believes.</p></blockquote>
]]></content>
  </entry>
  
</feed>
